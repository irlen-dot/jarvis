import os
import pdb

# from jarvis.helper import change_dir
from jarvis.git.types import CreateRepoInput
from jarvis.helper.cmd_prompt import run_command, change_dir
from langchain_core.tools import tool


def create_unity_gitignore():
    gitignore_content = """
# This .gitignore file should be placed at the root of your Unity project directory
#
# Get latest from https://github.com/github/gitignore/blob/main/Unity.gitignore
#
/[Ll]ibrary/
/[Tt]emp/
/[Oo]bj/
/[Bb]uild/
/[Bb]uilds/
/[Ll]ogs/
/[Uu]ser[Ss]ettings/

# MemoryCaptures can get excessive in size.
# They also could contain extremely sensitive data
/[Mm]emoryCaptures/

# Recordings can get excessive in size
/[Rr]ecordings/

# Uncomment this line if you wish to ignore the asset store tools plugin
# /[Aa]ssets/AssetStoreTools*

# Autogenerated Jetbrains Rider plugin
/[Aa]ssets/Plugins/Editor/JetBrains*

# Visual Studio cache directory
.vs/

# Gradle cache directory
.gradle/

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta
*.mdb.meta

# Unity3D generated file on crash reports
sysinfo.txt

# Builds
*.apk
*.aab
*.unitypackage
*.app

# Crashlytics generated file
crashlytics-build.properties

# Packed Addressables
/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*

# Temporary auto-generated Android Assets
/[Aa]ssets/[Ss]treamingAssets/aa.meta
/[Aa]ssets/[Ss]treamingAssets/aa/*
"""
    with open(".gitignore w") as f:
        f.write(gitignore_content.strip())
    print("Created .gitignore file for Unity project")

def create_gitignore(project_type: str):
    if 'unity' in project_type:
        create_unity_gitignore()

# @tool(args_schema=CreateRepoInput)
def create_and_push_repo(path, repo_name: str, project_type: str):
    """Creates a github repository and pushes all the commits"""
    print('Repository creation has started...')
    print(f"The path is: {path}")
    print(f"The project type is: {project_type}")
    if not os.path.isdir(path):
        print(f"Error: The directory {path} does not exist or is not accessible.")
        return

    with change_dir(path):
        print("--- Starting repository creation process ---")
        
        if not run_command("git init"):
            return
        
        # TODO You need to check what project type is it and configure the gitignore based on it
        create_gitignore(project_type)

        if not run_command("git init"):
            return

        # with open("README.md w") as f:
            # f.write("# Unity Project\n\nThis repository contains a Unity project created automatically.")

    
        if not run_command("git add ."):
            return

        if not run_command("git commit -m 'Initial commit'"):
            return

        if not run_command(f"gh repo create '{repo_name}' --private --source=. --push"):
            print("Error: Failed to create GitHub repository. Make sure Hub is installed and configured.")
            return

        # if not run_command(["git push -u origin main"]):
        #     return

        print("Repository successfully created and pushed to GitHub!")
        print("--- Finished repository creation process ---")