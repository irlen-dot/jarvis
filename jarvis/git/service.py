import os
from contextlib import contextmanager

from jarvis.helper.cmd_prompt import run_command


@contextmanager
def change_dir(path):
    """
    Context manager for changing the current working directory
    """
    print(f"Changing to directory: {path}")
    original_dir = os.getcwd()
    try:
        os.chdir(path)
        print(f"Current working directory: {os.getcwd()}")
        yield
    finally:
        print(f"Changing back to original directory: {original_dir}")
        os.chdir(original_dir)
        print(f"Current working directory: {os.getcwd()}")


def create_unity_gitignore():
    gitignore_content = """
# This .gitignore file should be placed at the root of your Unity project directory
#
# Get latest from https://github.com/github/gitignore/blob/main/Unity.gitignore
#
/[Ll]ibrary/
/[Tt]emp/
/[Oo]bj/
/[Bb]uild/
/[Bb]uilds/
/[Ll]ogs/
/[Uu]ser[Ss]ettings/

# MemoryCaptures can get excessive in size.
# They also could contain extremely sensitive data
/[Mm]emoryCaptures/

# Recordings can get excessive in size
/[Rr]ecordings/

# Uncomment this line if you wish to ignore the asset store tools plugin
# /[Aa]ssets/AssetStoreTools*

# Autogenerated Jetbrains Rider plugin
/[Aa]ssets/Plugins/Editor/JetBrains*

# Visual Studio cache directory
.vs/

# Gradle cache directory
.gradle/

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta
*.mdb.meta

# Unity3D generated file on crash reports
sysinfo.txt

# Builds
*.apk
*.aab
*.unitypackage
*.app

# Crashlytics generated file
crashlytics-build.properties

# Packed Addressables
/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*

# Temporary auto-generated Android Assets
/[Aa]ssets/[Ss]treamingAssets/aa.meta
/[Aa]ssets/[Ss]treamingAssets/aa/*
"""
    with open(".gitignore", "w") as f:
        f.write(gitignore_content.strip())
    print("Created .gitignore file for Unity project")

def create_and_push_repo(path):
    if not os.path.isdir(path):
        print(f"Error: The directory {path} does not exist or is not accessible.")
        return

    with change_dir(path):
        print("--- Starting repository creation process ---")
        
        if not run_command(["git", "init"]):
            return

        create_unity_gitignore()

        if not run_command(["git", "init"]):
            return

        with open("README.md", "w") as f:
            f.write("# Unity Project\n\nThis repository contains a Unity project created automatically.")

        if not run_command(["git", "add", "README.md", ".gitignore"]):
            return

        if not run_command(["git", "commit", "-m", "Initial commit with README and .gitignore"]):
            return

        if not run_command(["hub", "create"]):
            print("Error: Failed to create GitHub repository. Make sure Hub is installed and configured.")
            return

        if not run_command(["git", "push", "-u", "origin", "main"]):
            return

        print("Repository successfully created and pushed to GitHub!")
        print("--- Finished repository creation process ---")